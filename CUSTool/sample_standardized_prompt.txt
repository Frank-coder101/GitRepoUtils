
=== GITHUB COPILOT: ExtP REQUIREMENTS ANALYSIS REQUEST ===

REQUEST METADATA:
{
  "timestamp": "2025-07-07T10:53:45.044553",
  "version": "1.0.0",
  "purpose": "ExtP Requirements Analysis and Test Case Generation",
  "extp_path": "C:\\Users\\gibea\\Documents\\GitRepos\\DeFiHuddleTradingSystem"
}

REQUEST TYPE: requirements_analysis

EXPECTED OUTPUT FORMAT:
{
  "requirements": "JSON",
  "validation_rules": "JSON",
  "test_scenarios": "JSON"
}

ANALYSIS CONTEXT:
{
  "extp_structure": {
    ".copilot": {
      "type": "file",
      "size": 1476
    },
    ".pytest_cache": {
      ".gitignore": {
        "type": "file",
        "size": 39
      },
      "CACHEDIR.TAG": {
        "type": "file",
        "size": 191
      },
      "README.md": {
        "type": "file",
        "size": 310
      },
      "v": {}
    },
    "bootstrap.py": {
      "type": "file",
      "size": 2672
    },
    "config": {},
    "coverage.xml": {
      "type": "file",
      "size": 32597
    },
    "CUSErrors": {},
    "data": {},
    "docs": {
      "Architecture_Document.md": {
        "type": "file",
        "size": 12783
      },
      "AssumptionsLog.md": {
        "type": "file",
        "size": 0
      },
      "autogenerated": {
        "AssumptionsLog.md": {
          "type": "file",
          "size": 636
        },
        "CodeCoverageLog.md": {
          "type": "file",
          "size": 26396
        },
        "Code_File_Dependency_Matrix.md": {
          "type": "file",
          "size": 576
        },
        "development_process_execution_log.md": {
          "type": "file",
          "size": 8258
        },
        "ibkr_integration_test_results.txt": {
          "type": "file",
          "size": 3870
        },
        "IntegrationsConfigurationGuide.md": {
          "type": "file",
          "size": 2620
        },
        "integration_test_results.txt": {
          "type": "file",
          "size": 16692
        },
        "Requirements Traceability Matrix.csv": {
          "type": "file",
          "size": 29068
        },
        "TestRunLog.md": {
          "type": "file",
          "size": 1439
        }
      },
      "DevelopmentProcessAssumptionsLog.md": {
        "type": "file",
        "size": 14903
      },
      "Interactive Brokers Tech Brief.md.md": {
        "type": "file",
        "size": 2437
      },
      "Project_Requirements.md": {
        "type": "file",
        "size": 39396
      },
      "prompts": {
        "Architecture Prompt.txt": {
          "type": "file",
          "size": 1077
        },
        "DevelopmentProcess_Criteria_Artifact.md": {
          "type": "file",
          "size": 3845
        },
        "DevelopmentProcess_Criteria_CodeFile.md": {
          "type": "file",
          "size": 2077
        },
        "DevelopmentProcess_Criteria_Requirement.md": {
          "type": "file",
          "size": 1164
        },
        "DevelopmentProcess_Instructions.md": {
          "type": "file",
          "size": 13926
        },
        "False Negatives Test Anti Pattern in Integration and Unit TestModes.md": {
          "type": "file",
          "size": 1924
        },
        "IterativeTroubleshootingLoop.md": {
          "type": "file",
          "size": 1229
        },
        "MiniPrompt-UX-ErrorHandling and docs.md": {
          "type": "file",
          "size": 430
        },
        "Project Prompt.txt": {
          "type": "file",
          "size": 2886
        },
        "Replace all mock code Prompt.md": {
          "type": "file",
          "size": 1623
        }
      },
      "Requirements Traceability Matrix.csv": {
        "type": "file",
        "size": 191
      }
    },
    "emergency_stop_state.json": {
      "type": "file",
      "size": 17
    },
    "integration_test_log.txt": {
      "type": "file",
      "size": 34828
    }
  },
  "requirements_sources": [
    "README.md",
    "requirements.txt"
  ]
}

INSTRUCTIONS:
- Analyze the provided ExtP codebase and requirements
- Generate comprehensive requirements validation rules
- Create screen-by-screen workflow progression rules
- Identify CRITICAL workflow failures vs code-level issues
- Output structured JSON files for CUS consumption

EXPECTED OUTPUT STRUCTURE:

1. requirements.json:
{
  "application_name": "string",
  "version": "string", 
  "expected_workflows": {
    "workflow_name": {
      "trigger": "string",
      "input": "string",
      "expected_next_screen": "string",
      "expected_text_contains": ["string"],
      "failure_indicators": ["string"]
    }
  },
  "critical_validations": [{
    "validation_id": "string",
    "description": "string",
    "screen_progression": {
      "from": "string",
      "action": "string", 
      "to": "string"
    },
    "failure_criteria": ["string"]
  }]
}

2. validation_rules.json:
{
  "screen_progressions": {
    "screen_name": {
      "action_input": {
        "expected_screen": "string",
        "timeout_seconds": number,
        "failure_if_contains": ["string"],
        "success_if_contains": ["string"]
      }
    }
  },
  "error_classifications": {
    "CRITICAL": ["workflow_progression_failure", "requirements_violation"],
    "WARNING": ["code_behavior_mismatch", "timing_issue"],
    "INFO": ["input_method_fallback", "retry_success"]
  }
}

3. test_scenarios.json:
{
  "test_scenarios": [{
    "scenario_id": "string",
    "name": "string", 
    "description": "string",
    "steps": [{
      "step": number,
      "action": "string",
      "input": "string",
      "expected_result": "string",
      "validation_criteria": ["string"]
    }],
    "success_criteria": ["string"],
    "failure_criteria": ["string"]
  }]
}

Please analyze the provided context and generate these three JSON files with complete, production-ready requirements validation rules for the CUS system.

=== END REQUEST ===
