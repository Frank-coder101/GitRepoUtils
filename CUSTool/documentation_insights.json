[
  {
    "source_file": "C:\\Users\\gibea\\Documents\\GitRepos\\DeFiHuddleTradingSystem\\docs\\Project_Requirements.md",
    "insight_type": "requirement",
    "content": "REQ 2: .1 The system shall be fully cross-platform, supporting Windows 10 and later, macOS, and Linux distributions.\n    2.1.1 The system shall provide installation packages and instructions for each supported operating system.\n    2.1.2 The system shall ensure all features are available and functionally equivalent across all supported platforms.\n    2.1.3 The system shall include automated cross-platform testing as part of the CI/CD pipeline.\n    2.1.4 The system shall document any platform-specific limitations or differences.\n2.2 The system shall be optimized for primary use by users in Canada.\n    2.2.1 The system shall default to Canadian market data, exchanges, and regulatory settings.\n    2.2.2 The system shall support Canadian currency (CAD) and local conventions in all user interfaces and reports.\n    2.2.3 The system shall ensure compliance with Canadian trading regulations and data privacy laws.\n    2.2.4 The system shall provide localization for Canadian English and French where applicable.\n2.3 The system shall define and document all data sources and market feeds during the design phase.\n    2.3.1 The system shall identify all required data sources (e.g., market data, news, historical prices) and document their providers.\n    2.3.2 The system shall specify integration methods and data formats for each data source and market feed.\n    2.3.3 The system shall ensure all data sources are reliable, secure, and compliant with relevant regulations.\n    2.3.4 The system shall provide mechanisms for updating or replacing data sources as needed.\n2.4 The system shall support multi-asset coverage, with initial scope limited to stocks.\n    2.4.1 The system shall implement all trading, data, and reporting features for stocks in the initial release.\n    2.4.2 The system shall be designed to allow future extension to other asset classes (e.g., ETFs, options, futures, crypto).\n    2.4.3 The system shall document the prioritization and requirements for deferred asset classes in the \u201cDeferred Requirements\u201d section.\n    2.4.4 The system shall ensure all architecture and code are modular to facilitate future asset class integration.\n2.5 All requirements using the character ` at the beginning and end of words indicate key functional concepts critical to design and implementation.\n    2.5.1 The system documentation shall include a glossary or index of all such key functional concepts.\n    2.5.2 All architecture and code artifacts shall reference these concepts for traceability.\n    2.5.3 The requirements traceability matrix shall map each key concept to its implementation and related artifacts.\n2.6 All requirements using the text `(configurable)` indicate that the preceding value, item, component, or logic must be user-configurable.\n    2.6.1 The system shall provide user interfaces or configuration files to allow modification of all items marked as `(configurable)`.\n    2.6.2 The system documentation shall include a list of all configurable items and instructions for their modification.\n    2.6.3 All configuration changes shall be validated to ensure system integrity and prevent invalid states.\n2.7 All time values related to trading operations shall be based on the symbol's exchange's regular hours and time zone, not the end user's time zone.\n    2.7.1 The system shall retrieve and maintain accurate exchange hours and time zone data for all supported symbols.\n    2.7.2 The system shall calculate all time-based operations (e.g., offsets, cutoffs) using the exchange's local time.\n    2.7.3 The system shall display all relevant times to the user in both the exchange's local time and the user's local time, with clear labeling.\n    2.7.4 The system documentation shall clearly state this convention for all time-related requirements.\n2.8 The system shall define and implement user authentication and security requirements during the solution design phase.\n    2.8.1 The system shall identify all authentication methods required (e.g., password, OAuth, multi-factor authentication) and document them in the design.\n    2.8.2 The system shall specify security controls for data protection, access control, and secure communications.\n    2.8.3 The system shall ensure compliance with relevant security standards and regulations.\n    2.8.4 The system shall include a security review and threat assessment as part of the design process.\n2.9 The system shall operate in single-user mode on a local PC, supporting only one brokerage account per instance.\n    2.9.1 The system shall restrict access to a single user session at a time.\n    2.9.2 The system shall allow configuration and connection to only one brokerage account per installation.\n    2.9.3 The system shall store all user and account data locally, with appropriate security controls.\n    2.9.4 The system documentation shall clearly state these operational limitations.",
    "related_menus": [],
    "priority": 1,
    "test_suggestions": [
      "Test requirement: .1 The system shall be fully cross-platform, supporting Windows 10 and later, macOS, and Linux distributions.\n    2.1.1 The system shall provide installation packages and instructions for each supported operating system.\n    2.1.2 The system shall ensure all features are available and functionally equivalent across all supported platforms.\n    2.1.3 The system shall include automated cross-platform testing as part of the CI/CD pipeline.\n    2.1.4 The system shall document any platform-specific limitations or differences.\n2.2 The system shall be optimized for primary use by users in Canada.\n    2.2.1 The system shall default to Canadian market data, exchanges, and regulatory settings.\n    2.2.2 The system shall support Canadian currency (CAD) and local conventions in all user interfaces and reports.\n    2.2.3 The system shall ensure compliance with Canadian trading regulations and data privacy laws.\n    2.2.4 The system shall provide localization for Canadian English and French where applicable.\n2.3 The system shall define and document all data sources and market feeds during the design phase.\n    2.3.1 The system shall identify all required data sources (e.g., market data, news, historical prices) and document their providers.\n    2.3.2 The system shall specify integration methods and data formats for each data source and market feed.\n    2.3.3 The system shall ensure all data sources are reliable, secure, and compliant with relevant regulations.\n    2.3.4 The system shall provide mechanisms for updating or replacing data sources as needed.\n2.4 The system shall support multi-asset coverage, with initial scope limited to stocks.\n    2.4.1 The system shall implement all trading, data, and reporting features for stocks in the initial release.\n    2.4.2 The system shall be designed to allow future extension to other asset classes (e.g., ETFs, options, futures, crypto).\n    2.4.3 The system shall document the prioritization and requirements for deferred asset classes in the \u201cDeferred Requirements\u201d section.\n    2.4.4 The system shall ensure all architecture and code are modular to facilitate future asset class integration.\n2.5 All requirements using the character ` at the beginning and end of words indicate key functional concepts critical to design and implementation.\n    2.5.1 The system documentation shall include a glossary or index of all such key functional concepts.\n    2.5.2 All architecture and code artifacts shall reference these concepts for traceability.\n    2.5.3 The requirements traceability matrix shall map each key concept to its implementation and related artifacts.\n2.6 All requirements using the text `(configurable)` indicate that the preceding value, item, component, or logic must be user-configurable.\n    2.6.1 The system shall provide user interfaces or configuration files to allow modification of all items marked as `(configurable)`.\n    2.6.2 The system documentation shall include a list of all configurable items and instructions for their modification.\n    2.6.3 All configuration changes shall be validated to ensure system integrity and prevent invalid states.\n2.7 All time values related to trading operations shall be based on the symbol's exchange's regular hours and time zone, not the end user's time zone.\n    2.7.1 The system shall retrieve and maintain accurate exchange hours and time zone data for all supported symbols.\n    2.7.2 The system shall calculate all time-based operations (e.g., offsets, cutoffs) using the exchange's local time.\n    2.7.3 The system shall display all relevant times to the user in both the exchange's local time and the user's local time, with clear labeling.\n    2.7.4 The system documentation shall clearly state this convention for all time-related requirements.\n2.8 The system shall define and implement user authentication and security requirements during the solution design phase.\n    2.8.1 The system shall identify all authentication methods required (e.g., password, OAuth, multi-factor authentication) and document them in the design.\n    2.8.2 The system shall specify security controls for data protection, access control, and secure communications.\n    2.8.3 The system shall ensure compliance with relevant security standards and regulations.\n    2.8.4 The system shall include a security review and threat assessment as part of the design process.\n2.9 The system shall operate in single-user mode on a local PC, supporting only one brokerage account per instance.\n    2.9.1 The system shall restrict access to a single user session at a time.\n    2.9.2 The system shall allow configuration and connection to only one brokerage account per installation.\n    2.9.3 The system shall store all user and account data locally, with appropriate security controls.\n    2.9.4 The system documentation shall clearly state these operational limitations."
    ]
  },
  {
    "source_file": "C:\\Users\\gibea\\Documents\\GitRepos\\DeFiHuddleTradingSystem\\docs\\prompts\\DevelopmentProcess_Instructions.md",
    "insight_type": "error_condition",
    "content": "if not connected, matching the logic in `place_order`.\n- `RiskEngine.check_risk` now raises `NotImplementedError` in integration mode until real logic is implemented.\n- Corresponding tests have been updated to expect these failures in integration mode (using `assertRaises`).",
    "related_menus": [],
    "priority": 2,
    "test_suggestions": [
      "Test error condition: if not connected, matching the logic in `place_order`.\n- `RiskEngine.check_risk` now raises `NotImplementedError` in integration mode until real logic is implemented.\n- Corresponding tests have been updated to expect these failures in integration mode (using `assertRaises`)."
    ]
  },
  {
    "source_file": "C:\\Users\\gibea\\Documents\\GitRepos\\DeFiHuddleTradingSystem\\docs\\prompts\\DevelopmentProcess_Instructions.md",
    "insight_type": "error_condition",
    "content": "s gracefully.\n- Integration tests for IBKR connectivity validate order placement, account data retrieval, and error scenarios.",
    "related_menus": [],
    "priority": 2,
    "test_suggestions": [
      "Test error condition: s gracefully.\n- Integration tests for IBKR connectivity validate order placement, account data retrieval, and error scenarios."
    ]
  },
  {
    "source_file": "C:\\Users\\gibea\\Documents\\GitRepos\\DeFiHuddleTradingSystem\\docs\\prompts\\DevelopmentProcess_Instructions.md",
    "insight_type": "error_condition",
    "content": "s and explicit failure modes to ensure tests fail when integration is not available or not implemented.",
    "related_menus": [],
    "priority": 2,
    "test_suggestions": [
      "Test error condition: s and explicit failure modes to ensure tests fail when integration is not available or not implemented."
    ]
  }
]