|Requirement Number|Requirement Description|Artifact Number|Artifact Name|Artifact Description|Class/Interface Name|Module/File Name|Key Methods/Responsibilities|Data Model Attributes|Error/Event Codes|Sequence/Interaction Example|
|1.1|Enable new retail investors to use advanced institutional trading capabilities|APP-1|User Interface (CLI Wizard)|Interactive configuration wizard for user onboarding and setup|UserInterfaceCLIWizard|user_interface_cli_wizard.py|run() prompt_user() display_menu()|N/A|N/A|User launches CLI; prompted for onboarding|
|1.2|Most automated and simplest usage possible|APP-1|User Interface (CLI Wizard)|Interactive configuration wizard for user onboarding and setup|UserInterfaceCLIWizard|user_interface_cli_wizard.py|run() prompt_user() display_menu()|N/A|N/A|User launches CLI; prompted for onboarding|
|1.3|Simple user experience|APP-1|User Interface (CLI Wizard)|Interactive configuration wizard for user onboarding and setup|UserInterfaceCLIWizard|user_interface_cli_wizard.py|run() prompt_user() display_menu()|N/A|N/A|User launches CLI; prompted for onboarding|
|2.1|Cross-platform support (Windows macOS Linux)|TECH-1|Platform Abstraction Layer|Ensures compatibility and OS-specific handling|PlatformAbstractionLayer|platform_abstraction.py|detect_os() get_path()|N/A|N/A|N/A|
|2.1.1|Windows as first release target|TECH-1|Platform Abstraction Layer|Ensures compatibility and OS-specific handling|PlatformAbstractionLayer|platform_abstraction.py|detect_os() get_path()|N/A|N/A|N/A|
|2.2|Primary use in Canada|DATA-1|Localization Module|Handles region-specific settings and data|LocalizationModule|localization.py|get_locale() set_locale()|region language|N/A|N/A|
|2.3|Data sources and market feeds|DATA-2|Market Data Adapter|Abstracts and manages all market data sources|MarketDataAdapter|market_data_adapter.py|fetch_data() subscribe()|source symbol|N/A|fetch_data() called by AnalysisEngine|
|2.4|Multi-asset coverage (stocks)|DATA-2|Market Data Adapter|Abstracts and manages all market data sources|MarketDataAdapter|market_data_adapter.py|fetch_data() subscribe()|source symbol|N/A|fetch_data() called by AnalysisEngine|
|3.1.1.1|User inputs total funds|APP-2|Funds Input Component|UI and logic for user to input available funds|FundsInputComponent|funds_input.py|prompt_funds() validate_funds()|amount|N/A|User prompted for funds|
|3.1.1.2|Connects to broker account|APP-3|Broker Connection Manager|Handles authentication and connection to broker APIs|BrokerConnectionManager|broker_connection.py|connect() authenticate()|status|N/A|connect() called by CLI|
|3.1.2.1|Execution cycles in modes|APP-4|Execution Cycle Controller|Manages BackTesting and Live modes|ExecutionCycleController|execution_cycle.py|start_cycle() stop_cycle()|mode|N/A|start_cycle() called by CLI|
|3.1.2.1.1|BackTesting mode|APP-4|Execution Cycle Controller|Manages BackTesting and Live modes|ExecutionCycleController|execution_cycle.py|start_cycle() stop_cycle()|mode|N/A|start_cycle(mode='backtest')|
|3.1.2.1.2|Live mode|APP-4|Execution Cycle Controller|Manages BackTesting and Live modes|ExecutionCycleController|execution_cycle.py|start_cycle() stop_cycle()|mode|N/A|start_cycle(mode='live')|
|3.1.2.2|Live mode confirmation|APP-5|Live Mode Confirmation Dialog|Prompts user for explicit confirmation|LiveModeConfirmationDialog|live_mode_confirmation.py|prompt_confirmation()|N/A|N/A|User prompted for confirmation|
|3.1.2.3|Pull broker/instrument fees|DATA-3|FEE Data Fetcher|Fetches and manages fee data from broker|FEEDataFetcher|fee_data_fetcher.py|fetch_fees()|broker instrument|N/A|fetch_fees() called on startup|
|3.1.3.1|Retrieve fees on startup|DATA-3|FEE Data Fetcher|Fetches and manages fee data from broker|FEEDataFetcher|fee_data_fetcher.py|fetch_fees()|broker instrument|N/A|fetch_fees() called on startup|
|3.1.4.1|User-defined persistent watchlist|DATA-4|Watchlist Manager|Manages persistent watchlist and Google Drive sync|WatchlistManager|watchlist_manager.py|load_watchlist() sync_with_drive()|symbols|N/A|load_watchlist() on startup|
|3.1.4.2|Watchlist sync from Google Drive|DATA-4|Watchlist Manager|Manages persistent watchlist and Google Drive sync|WatchlistManager|watchlist_manager.py|load_watchlist() sync_with_drive()|symbols|N/A|sync_with_drive() scheduled|
|3.1.5.1|Unified audit log|DATA-5|Audit Log Engine|Centralized logging for orders rejections confirmations|AuditLogEngine|audit_log.py|log_event() get_logs()|event_id timestamp details|E10001|log_event() called on order|
|3.1.5.1.1|Unique identifier for log entries|DATA-5|Audit Log Engine|Centralized logging for orders rejections confirmations|AuditLogEngine|audit_log.py|log_event() get_logs()|event_id timestamp details|E10001|log_event() called on order|
|3.1.5.1.2|Timestamp order details P&L|DATA-5|Audit Log Engine|Centralized logging for orders rejections confirmations|AuditLogEngine|audit_log.py|log_event() get_logs()|event_id timestamp details|E10001|log_event() called on order|
|3.1.5.1.3|Call stack reference in log|DATA-5|Audit Log Engine|Centralized logging for orders rejections confirmations|AuditLogEngine|audit_log.py|log_event() get_logs()|event_id timestamp details|E10001|log_event() called on order|
|4.1.1|Simple configuration interface|APP-6|Config UI|User interface for grouped expandable/collapsible settings|ConfigUI|config_ui.py|display_settings() update_setting()|setting value|N/A|display_settings() on config|
|4.1.2|No manual file editing|APP-6|Config UI|User interface for grouped expandable/collapsible settings|ConfigUI|config_ui.py|display_settings() update_setting()|setting value|N/A|display_settings() on config|
|4.1.3|Configuration wizard|APP-1|User Interface (CLI Wizard)|Interactive configuration wizard for user onboarding and setup|UserInterfaceCLIWizard|user_interface_cli_wizard.py|run() prompt_user() display_menu()|N/A|N/A|User launches CLI; prompted for onboarding|
|4.2.1|Step-by-step installer|APP-7|Installer/Setup Engine|Automates environment setup and initial config|InstallerSetupEngine|installer_setup.py|run_install() check_dependencies()|N/A|N/A|run_install() on first launch|
|4.3.1|Centralized human-readable config|DATA-6|Config Store|Centralized SQLite config with inline help|ConfigStore|config_store.py|load_config() save_config()|setting value|N/A|load_config() on startup|
|4.3.2|Default values and explanations|DATA-6|Config Store|Centralized SQLite config with inline help|ConfigStore|config_store.py|load_config() save_config()|setting value|N/A|load_config() on startup|
|4.4.1|Interactive mode selection|APP-8|Mode Selection Menu|Menu for BackTesting/Live mode selection|ModeSelectionMenu|mode_selection.py|display_modes() select_mode()|mode|N/A|display_modes() on startup|
|4.5.1|Abstraction of advanced features|APP-9|Feature Abstraction Layer|Wraps advanced features behind simple options|FeatureAbstractionLayer|feature_abstraction.py|wrap_feature()|N/A|N/A|wrap_feature() called by CLI|
|4.6.1|Plain language errors|APP-10|Error Handler|User-facing error handler with actionable suggestions|ErrorHandler|error_handler.py|handle_error() show_help()|error_code message|E10002|handle_error() on error|
|4.6.2|Contextual help on errors|APP-10|Error Handler|User-facing error handler with actionable suggestions|ErrorHandler|error_handler.py|handle_error() show_help()|error_code message|E10002|handle_error() on error|
|4.7.1|Scale In/Out order logic|APP-11|Order Management Engine|Handles scale in/out and bracket order adjustments|OrderManagementEngine|order_management.py|place_order() adjust_bracket()|order_id type|N/A|place_order() on scale in/out|
|4.7.2|Bracket order adjustment|APP-11|Order Management Engine|Handles scale in/out and bracket order adjustments|OrderManagementEngine|order_management.py|place_order() adjust_bracket()|order_id type|N/A|adjust_bracket() on order|
|5.1.1|Backtesting dataset|DATA-7|Backtest Data Loader|Loads and manages backtest datasets|BacktestDataLoader|backtest_data_loader.py|load_dataset() get_data()|symbol timeframe|N/A|load_dataset() on backtest|
|5.1.2|KPI logging per strategy|DATA-8|KPI Logger|Logs KPIs for each strategy|KPILogger|kpi_logger.py|log_kpi() get_kpis()|strategy kpi_type value|N/A|log_kpi() on backtest|
|5.1.3|Results persistence|DATA-8|KPI Logger|Logs KPIs for each strategy|KPILogger|kpi_logger.py|log_kpi() get_kpis()|strategy kpi_type value|N/A|log_kpi() on backtest|
|5.1.4|Re-run on fee change|APP-4|Execution Cycle Controller|Manages BackTesting and Live modes|ExecutionCycleController|execution_cycle.py|start_cycle() stop_cycle()|mode|N/A|start_cycle() called by CLI|
|5.1.5|Recession period baselines|DATA-7|Backtest Data Loader|Loads and manages backtest datasets|BacktestDataLoader|backtest_data_loader.py|load_dataset() get_data()|symbol timeframe|N/A|load_dataset() on backtest|
|5.1.6|Simulate regime transitions and stop-loss/TP logic across all bars|APP-12|Backtest Engine|Simulates regime transitions and stop-loss/TP logic|BacktestEngine|backtest_engine.py|simulate_regime_transitions() simulate_stop_loss_tp()|N/A|N/A|simulate_regime_transitions() on backtest|
|5.1.7|Simulated trades must be logged with outcome scored|DATA-8|KPI Logger|Logs KPIs for each strategy|KPILogger|kpi_logger.py|log_simulated_trade()|trade_id, outcome, score|N/A|log_simulated_trade() on backtest|
|5.1.8|Session-level KPIs must be persisted including: Total return, Max drawdown, Win/loss rate, Sharpe ratio|DATA-8|KPI Logger|Logs KPIs for each strategy|KPILogger|kpi_logger.py|log_session_kpis()|total_return, max_drawdown, win_loss_rate, sharpe_ratio|N/A|log_session_kpis() on backtest|
|5.1.9|Must support multi-scenario runs: trade halt, market crash, recession, normal, inflation, 1929 style depression|APP-12|Backtest Engine|Simulates multi-scenario runs|BacktestEngine|backtest_engine.py|run_scenario()|scenario_type|N/A|run_scenario() on backtest|
|5.3.1|Training log for ML/AI|DATA-9|Training Log Engine|Logs for ML/AI training and auto-tuning|TrainingLogEngine|training_log_engine.py|log_training_data()|training_id, data|N/A|log_training_data() on training event|
|5.3.2|Auto-tuning config/code|APP-13|AI Optimizer Engine|Handles auto-tuning and code/config updates|AIOptimizerEngine|ai_optimizer_engine.py|auto_tune()|N/A|N/A|auto_tune() on training event|
|5.3.3|Learning cycle|APP-13|AI Optimizer Engine|Handles auto-tuning and code/config updates|AIOptimizerEngine|ai_optimizer_engine.py|run_learning_cycle()|N/A|N/A|run_learning_cycle() on training event|
|5.3.4|Enhancement activation|APP-13|AI Optimizer Engine|Handles auto-tuning and code/config updates|AIOptimizerEngine|ai_optimizer_engine.py|activate_enhancements()|N/A|N/A|activate_enhancements() on training event|
|5.3.5|Enhancement management|APP-13|AI Optimizer Engine|Handles auto-tuning and code/config updates|AIOptimizerEngine|ai_optimizer_engine.py|manage_enhancements()|N/A|N/A|manage_enhancements() on training event|
|6.1|Technical analysis methods|APP-14|Analysis Engine|Implements all technical analysis and scoring|AnalysisEngine|analysis_engine.py|calculate_indicators() score_trade()|N/A|N/A|calculate_indicators() on new data|
|6.1.1|Regression forecasting|APP-14|Analysis Engine|Implements regression forecasting|AnalysisEngine|analysis_engine.py|regression_forecast()|N/A|N/A|regression_forecast() on new data|
|6.1.2|Regime states (Scalp, Long, Take Profit, Reversal, Liquidate, Short)|APP-14|Analysis Engine|Implements regime state analysis|AnalysisEngine|analysis_engine.py|analyze_regime_states()|N/A|N/A|analyze_regime_states() on new data|
|6.1.3|All 20 candle patterns|APP-14|Analysis Engine|Implements candle pattern analysis|AnalysisEngine|analysis_engine.py|analyze_candle_patterns()|N/A|N/A|analyze_candle_patterns() on new data|
|6.1.4|SMA 5, 9, 55, 200 (and crossovers)|APP-14|Analysis Engine|Implements SMA and crossover analysis|AnalysisEngine|analysis_engine.py|analyze_sma_crossovers()|N/A|N/A|analyze_sma_crossovers() on new data|
|6.1.5|EMA 21|APP-14|Analysis Engine|Implements EMA analysis|AnalysisEngine|analysis_engine.py|analyze_ema()|N/A|N/A|analyze_ema() on new data|
|6.1.6|Candle crossover of above SMAs and EMA|APP-14|Analysis Engine|Implements candle crossover analysis|AnalysisEngine|analysis_engine.py|analyze_candle_crossovers()|N/A|N/A|analyze_candle_crossovers() on new data|
|6.1.7|Reversals and divergences with RSI, CMF, MACD|APP-14|Analysis Engine|Implements reversal/divergence analysis|AnalysisEngine|analysis_engine.py|analyze_reversals_divergences()|N/A|N/A|analyze_reversals_divergences() on new data|
|6.1.8|Swing trade profiles, oscillators, contrarian setups|APP-14|Analysis Engine|Implements swing/oscillator/contrarian analysis|AnalysisEngine|analysis_engine.py|analyze_swing_oscillator_contrarian()|N/A|N/A|analyze_swing_oscillator_contrarian() on new data|
|6.1.9|Momentum, streak logic, Fibonacci, Elliott wave, Bollinger Bands|APP-14|Analysis Engine|Implements momentum, Fibonacci, Elliott, Bollinger|AnalysisEngine|analysis_engine.py|analyze_momentum_fibonacci_elliott_bollinger()|N/A|N/A|analyze_momentum_fibonacci_elliott_bollinger() on new data|
|6.1.10|Order block detection|APP-14|Analysis Engine|Implements order block detection|AnalysisEngine|analysis_engine.py|detect_order_blocks()|N/A|N/A|detect_order_blocks() on new data|
|6.1.11|Market depth (warn if unavailable)|APP-14|Analysis Engine|Implements market depth analysis|AnalysisEngine|analysis_engine.py|analyze_market_depth()|N/A|N/A|analyze_market_depth() on new data|
|6.1.12|Multi-Timeframe Analysis (MTFA)|APP-14|Analysis Engine|Implements multi-timeframe analysis|AnalysisEngine|analysis_engine.py|multi_timeframe_analysis()|N/A|N/A|multi_timeframe_analysis() on new data|
|6.1.12.1|Pull data for multiple configurable timeframes and re-run all above technical analysis steps|APP-14|Analysis Engine|Implements multi-timeframe data pull|AnalysisEngine|analysis_engine.py|pull_multi_timeframe_data()|N/A|N/A|pull_multi_timeframe_data() on new data|
|6.1.12.2|Each cross-timeframe agreement multiplies the score by a configurable factor|APP-14|Analysis Engine|Implements cross-timeframe scoring|AnalysisEngine|analysis_engine.py|apply_cross_timeframe_factor()|N/A|N/A|apply_cross_timeframe_factor() on new data|
|7.1|Parallel execution cycles|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|schedule_cycle() run_cycle()|N/A|N/A|schedule_cycle() on new data|
|7.1.1|All cycles should be executed in parallel|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|execute_parallel_cycles()|N/A|N/A|execute_parallel_cycles() on schedule|
|7.1.2|Each cycle has priority over the other cycles and preempts the cycles defined thereafter|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|enforce_cycle_priority()|N/A|N/A|enforce_cycle_priority() on schedule|
|7.1.3|Each cycle must track the Average Cycle Time and alert and log a warning if current cycle time is taking longer than 10% of the average time|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|track_cycle_time()|N/A|N/A|track_cycle_time() on schedule|
|7.2|Portfolio protection/opportunity monitoring|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|portfolio_protection() opportunity_monitoring()|N/A|N/A|portfolio_protection() on schedule|
|7.2.1|Opportunity Monitoring - News Wire Events|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|monitor_news_wire_events()|N/A|N/A|monitor_news_wire_events() on schedule|
|7.2.2|Opportunity Monitoring - Market Scanning|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|market_scanning()|N/A|N/A|market_scanning() on schedule|
|7.2.3|Opportunity Monitoring - Long Term Entries|APP-15|Cycle Manager|Manages and schedules all execution cycles|CycleManager|cycle_manager.py|long_term_entries()|N/A|N/A|long_term_entries() on schedule|
|7.2.7|Analyze each symbol in opportunities_identified using logic section in 6 Analysis and Scoring|APP-14|Analysis Engine|Implements all technical analysis and scoring|AnalysisEngine|analysis_engine.py|analyze_opportunities()|N/A|N/A|analyze_opportunities() on schedule|
|7.2.7.1|Remove from the opportunities_identified list any symbol whose score is lower than the minimum acceptable score to take a position|APP-14|Analysis Engine|Implements all technical analysis and scoring|AnalysisEngine|analysis_engine.py|filter_low_score_opportunities()|N/A|N/A|filter_low_score_opportunities() on schedule|
|7.2.7.2|If the portfolio balance is too low for another minimum position size|APP-11|Order Management Engine|Handles scale in/out and bracket order adjustments|OrderManagementEngine|order_management.py|check_portfolio_balance()|N/A|N/A|check_portfolio_balance() on schedule|
|7.2.7.2.2|Merge the list of current portfolio position with the list of opportunities_identified|DATA-10|Temp Symbol Table|Manages temporary symbol table for opportunity selection|TempSymbolTable|temp_symbol_table.py|merge_portfolio_and_opportunities()|symbol, score, size, source|N/A|merge_portfolio_and_opportunities() on schedule|
|7.2.7.2.3|Loop through each temporary symbol item|DATA-10|Temp Symbol Table|Manages temporary symbol table for opportunity selection|TempSymbolTable|temp_symbol_table.py|iterate_temp_symbols()|symbol, score, size, source|N/A|iterate_temp_symbols() on schedule|
|7.2.7.2.4|Loop again through each temporary symbol item remaining in temporary symbol table|DATA-10|Temp Symbol Table|Manages temporary symbol table for opportunity selection|TempSymbolTable|temp_symbol_table.py|finalize_temp_symbols()|symbol, score, size, source|N/A|finalize_temp_symbols() on schedule|
|8.2.2|Cancel any and all pending orders for that symbol|APP-11|Order Management Engine|Handles order cancellations|OrderManagementEngine|order_management.py|cancel_pending_orders()|order_id, symbol|N/A|cancel_pending_orders() on close|
|8.2.3|Use calculated limit order using 2 second price slope|APP-20|Price Slope Calculator|Calculates price slope for order adjustment|PriceSlopeCalculator|price_slope_calculator.py|calculate_slope()|symbol, price, slope|N/A|calculate_slope() on order|
|8.3|Add order details (and any related order cancellations) to order confirmation log|DATA-5|Audit Log Engine|Centralized logging for orders, rejections, confirmations|AuditLogEngine|audit_log.py|log_event()|event_id, timestamp, details|E10001|log_event() on order|
|8.4|Remove position from portfolio positions score list|APP-11|Order Management Engine|Handles position removal|OrderManagementEngine|order_management.py|remove_position_from_score_list()|symbol|N/A|remove_position_from_score_list() on close|
|11.3.2|Total allowed trading size is configurable|DATA-6|Config Store|Centralized SQLite config with inline help|ConfigStore|config_store.py|load_config() save_config()|setting, value|N/A|load_config() on startup|
|11.3.3|Pseudocode for merging and processing the table must be included in system documentation|APP-22|Documentation Suite|Install guide, config help, error list, trade logic docs|DocumentationSuite|documentation_suite.py|generate_docs()|N/A|N/A|generate_docs() on request|
|11.4.2|Market scanning to use configurable API|DATA-2|Market Data Adapter|Abstracts and manages all market data sources|MarketDataAdapter|market_data_adapter.py|fetch_data() subscribe()|source, symbol|N/A|fetch_data() called by AnalysisEngine|
|11.8.1|First release must support terminal-based configuration wizard|APP-1|User Interface (CLI Wizard)|Interactive configuration wizard for user onboarding and setup|UserInterfaceCLIWizard|user_interface_cli_wizard.py|run() prompt_user() display_menu()|N/A|N/A|User launches CLI; prompted for onboarding|
|11.10|Documentation requirement|APP-22|Documentation Suite|Install guide, config help, error list, trade logic docs|DocumentationSuite|documentation_suite.py|generate_docs()|N/A|N/A|generate_docs() on request|
|11.11|Quantifiable language|APP-22|Documentation Suite|Install guide, config help, error list, trade logic docs|DocumentationSuite|documentation_suite.py|generate_docs()|N/A|N/A|generate_docs() on request|
|12.1|All section and subsection numbers must be strictly sequential|APP-22|Documentation Suite|Install guide, config help, error list, trade logic docs|DocumentationSuite|documentation_suite.py|generate_docs()|N/A|N/A|generate_docs() on request|
|13.1|A glossary must define all specialized terms or link to authoritative external references|APP-22|Documentation Suite|Install guide, config help, error list, trade logic docs|DocumentationSuite|documentation_suite.py|generate_docs()|N/A|N/A|generate_docs() on request|
|15.1.1|Web/mobile interface: View current portfolio positions and their scores|APP-23|Remote Access Module|Web/mobile interface for portfolio viewing|RemoteAccessModule|remote_access_module.py|view_portfolio()|N/A|N/A|view_portfolio() on user request|
|15.1.2|Web/mobile interface: View active orders and their status|APP-23|Remote Access Module|Web/mobile interface for portfolio viewing|RemoteAccessModule|remote_access_module.py|view_active_orders()|N/A|N/A|view_active_orders() on user request|
|15.1.3|Web/mobile interface: Receive push notifications or alerts for key events|APP-23|Remote Access Module|Web/mobile interface for portfolio viewing|RemoteAccessModule|remote_access_module.py|send_push_notification()|N/A|N/A|send_push_notification() on event|
|15.2|Interface must connect securely to the local system and must be disabled by default|APP-23|Remote Access Module|Web/mobile interface for portfolio viewing|RemoteAccessModule|remote_access_module.py|secure_connect()|N/A|N/A|secure_connect() on startup|
|15.3|Authentication must be enforced before granting access to remote data|APP-23|Remote Access Module|Web/mobile interface for portfolio viewing|RemoteAccessModule|remote_access_module.py|authenticate_user()|N/A|N/A|authenticate_user() on connect|
|15.4|Full trading functionality via remote access is deferred|APP-23|Remote Access Module|Web/mobile interface for portfolio viewing|RemoteAccessModule|remote_access_module.py|N/A|N/A|N/A|N/A|
|16.1|Persist runtime state to disk every 30 seconds|APP-24|Crash Recovery Engine|Persists and restores runtime state|CrashRecoveryEngine|crash_recovery_engine.py|persist_state()|N/A|N/A|persist_state() on crash|
|16.2|Upon restart, detect saved state and prompt user to resume or start clean|APP-24|Crash Recovery Engine|Persists and restores runtime state|CrashRecoveryEngine|crash_recovery_engine.py|restore_state()|N/A|N/A|restore_state() on restart|
|16.3|If live orders are present at restart, reconcile with internal state|APP-24|Crash Recovery Engine|Persists and restores runtime state|CrashRecoveryEngine|crash_recovery_engine.py|reconcile_live_orders()|N/A|N/A|reconcile_live_orders() on restart|
|17.1|Margin monitoring|APP-19|Risk Engine|Calculates and enforces risk metrics|RiskEngine|risk_engine.py|assess_risk() apply_risk_limits()|N/A|N/A|assess_risk() on order|
|17.2|If margin usage exceeds threshold, halt new positions|APP-19|Risk Engine|Calculates and enforces risk metrics|RiskEngine|risk_engine.py|halt_new_positions()|N/A|N/A|halt_new_positions() on margin|
|17.3|If broker API returns errors or stale data, notify user and log alert|APP-28|Broker Retry Handler|Handles broker API retries and errors|BrokerRetryHandler|broker_retry_handler.py|notify_user_on_error()|N/A|N/A|notify_user_on_error() on error|
|18.1|Emergency stop: Cancel all open orders immediately|APP-25|Emergency Stop Handler|Handles emergency stop and resume|EmergencyStopHandler|emergency_stop_handler.py|trigger_emergency_stop()|N/A|N/A|trigger_emergency_stop() on user action|
|18.2|System must confirm activation/deactivation of emergency stop|APP-25|Emergency Stop Handler|Handles emergency stop and resume|EmergencyStopHandler|emergency_stop_handler.py|confirm_emergency_stop()|N/A|N/A|confirm_emergency_stop() on user action|
|18.3|Emergency stop state must persist across restarts|APP-25|Emergency Stop Handler|Handles emergency stop and resume|EmergencyStopHandler|emergency_stop_handler.py|persist_emergency_stop_state()|N/A|N/A|persist_emergency_stop_state() on shutdown|
|19.1|Symbol lifecycle management: review symbols for deactivation|APP-26|Symbol Lifecycle Manager|Manages symbol activation/deactivation|SymbolLifecycleManager|symbol_lifecycle_manager.py|review_symbols_for_deactivation()|symbol, reason|N/A|review_symbols_for_deactivation() on schedule|
|19.2|If symbol matches criteria, flag for deactivation|APP-26|Symbol Lifecycle Manager|Manages symbol activation/deactivation|SymbolLifecycleManager|symbol_lifecycle_manager.py|flag_symbol_for_deactivation()|symbol, reason|N/A|flag_symbol_for_deactivation() on review|
|19.3|Deactivated symbols must be removed from active cycles and appear in UI|APP-26|Symbol Lifecycle Manager|Manages symbol activation/deactivation|SymbolLifecycleManager|symbol_lifecycle_manager.py|remove_deactivated_symbols()|symbol|N/A|remove_deactivated_symbols() on review|
|19.4|Users must be able to manually re-activate a disabled symbol|APP-26|Symbol Lifecycle Manager|Manages symbol activation/deactivation|SymbolLifecycleManager|symbol_lifecycle_manager.py|reactivate_symbol()|symbol|N/A|reactivate_symbol() on user action|
|20.1|Before any order, determine if market is open for symbol’s exchange|APP-27|Market Hours Engine|Validates market open/close and edge cases|MarketHoursEngine|market_hours_engine.py|validate_market_hours()|symbol, exchange|N/A|validate_market_hours() on order|
|20.2|On holidays or early close days, adjust execution cycle windows|APP-27|Market Hours Engine|Validates market open/close and edge cases|MarketHoursEngine|market_hours_engine.py|adjust_for_holidays()|symbol, exchange|N/A|adjust_for_holidays() on schedule|
|21.1|Retry failed API calls up to 3 times using exponential backoff|APP-28|Broker Retry Handler|Handles broker API retries and errors|BrokerRetryHandler|broker_retry_handler.py|retry_connection()|N/A|N/A|retry_connection() on disconnection|
|21.2|If failure persists, log, notify user, and skip impacted cycle|APP-28|Broker Retry Handler|Handles broker API retries and errors|BrokerRetryHandler|broker_retry_handler.py|log_and_notify_failure()|N/A|N/A|log_and_notify_failure() on error|
|22.1|Trade journaling: log trade journal entry for every executed trade|DATA-12|Trade Journal Engine|Logs trade journal entries for debugging|TradeJournalEngine|trade_journal_engine.py|log_trade_entry()|entry_id, timestamp, details|E10004|log_trade_entry() on trade|
|22.2|Trade journal entries must be human-readable and machine-readable|DATA-12|Trade Journal Engine|Logs trade journal entries for debugging|TradeJournalEngine|trade_journal_engine.py|get_trade_journal()|entry_id, timestamp, details|E10004|get_trade_journal() on request|
|23.1|Broker capability validation: check supported order types and permissions|APP-29|Broker Capability Validator|Checks broker account capabilities|BrokerCapabilityValidator|broker_capability_validator.py|validate_capabilities()|N/A|N/A|validate_capabilities() on account check|
|23.2|If capabilities are missing, warn the user before starting any cycle|APP-29|Broker Capability Validator|Checks broker account capabilities|BrokerCapabilityValidator|broker_capability_validator.py|warn_user_on_missing_capabilities()|N/A|N/A|warn_user_on_missing_capabilities() on check|
|24.1|Risk-to-reward ratio enforcement: exclude trades below minimum R:R|APP-19|Risk Engine|Calculates and enforces risk metrics|RiskEngine|risk_engine.py|enforce_risk_to_reward()|N/A|N/A|enforce_risk_to_reward() on trade|
|24.2|Log rejected opportunities with justification|DATA-5|Audit Log Engine|Centralized logging for orders, rejections, confirmations|AuditLogEngine|audit_log.py|log_rejected_opportunity()|event_id, reason|E10005|log_rejected_opportunity() on trade|
|APP-16|Deferred options logic|APP-16|Options Module|Handles options logic (deferred)|DeferredOptionsLogic|deferred_options_logic.py|handle_deferred_options()|N/A|N/A|handle_deferred_options() on new data|
|APP-17|Deferred crypto logic|APP-17|Crypto Module|Handles crypto logic (deferred)|DeferredCryptoLogic|deferred_crypto_logic.py|handle_deferred_crypto()|N/A|N/A|handle_deferred_crypto() on new data|
|APP-18|Deferred futures logic|APP-18|Futures Module|Handles futures logic (deferred)|DeferredFuturesLogic|deferred_futures_logic.py|handle_deferred_futures()|N/A|N/A|handle_deferred_futures() on new data|
|DATA-11|Error ID logging|DATA-11|Error Log Engine|Logs errors with unique IDs and manages log rotation|ErrorLogEngine|error_log_engine.py|log_error() rotate_logs()|error_id, timestamp, details|E10003|log_error() called on error|
