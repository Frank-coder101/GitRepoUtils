
"Develop a complete trading system application based on the provided requirements and technical brief. Follow these guidelines to ensure the project is fully implemented and functional:

If you have a question, 
a) estimate what the answer would be and record that assumption into a new date stamped log file (AssumptionsLog.md) and add it to the /docs/autogenerated folder
b) proceed with the answer and continue the work uninterrupted

Memorize the directory structure and file list for the entire project before begining work on any prompt


1. **Requirements Implementation**:
   - Implement all functional, user experience, runtime modes, and analysis requirements as outlined in the `Project_Requirements.md` file.
   - Ensure the application supports both `BackTesting` and `Live` modes with all associated features, including logging, scoring, and execution cycles.
   - Include all user-friendly configuration, guided setup, and error-handling features.

2. **Architecture and Design**:
   - Enhance the architecture and technology stack described in the `Architecture_Document.md` and `Interactive Brokers Tech Brief.md` files.
   - Integrate with Interactive Brokers APIs (`TWS API`, `Client Portal Web API`, etc.) for live trading and data fetching.
   - Use `Backtrader` for backtesting and strategy execution.
   - Implement SQLite-based persistence for configuration, logs, and backtest storage.
   - Include an AI optimizer using the OpenAI API for auto-tuning and learning cycles.

3. **Development Process**:
   - Begin with a detailed architecture and design phase, creating all necessary modules, classes, and interfaces.
   - Write production-ready code for every feature, avoiding placeholders or mock implementations.
   - Ensure all components are modular, maintainable, and adhere to best practices.

4. **Testing and Validation**:
   - Continuously validate the application by compiling and running it after implementing each major feature.
   - Write unit tests, integration tests, and end-to-end tests to ensure the application functions as expected.
   - Ensure the application is cross-platform and runs on Windows, macOS, and Linux.

5. **Completion Criteria**:
   - The application must be fully implemented with no placeholders or mock code.
   - The application must compile and run without errors.
   - The application must be ready for user testing, with all features functional and documented.

6. **Additional Notes**:
   - Use clear and concise comments in the code to explain complex logic.
   - Provide inline documentation for all public methods and classes.
   - Include a README file with setup instructions, usage guidelines, and troubleshooting tips.

Work continuously, addressing each requirement, architecture component, and feature until the application is complete and ready for testing."

